import { prisma } from '@/prisma/prisma-client';
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { ExerciseCreateType } from '@/app/types/types';

export async function GET() {
  try {
    const session = await getServerSession(authOptions);

    console.log('üîπ GET session:', session);

    if (!session?.user || !('id' in session.user)) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const workouts = await prisma.workout.findMany({
      where: { userId: Number(session.user.id) },
      select: {
        id: true,
        color: true,
        title: true,
        days: {
          select: {
            id: true,
            date: true,
          },
        },
      },
    });

    return NextResponse.json(workouts);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    console.log('üîπ POST session:', session);

    if (!session?.user || !('id' in session.user)) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { title, color, exercises } = await req.json();

    if (!title || !color || !Array.isArray(exercises)) {
      return NextResponse.json({ error: 'Invalid data' }, { status: 400 });
    }

    const userId = Number(session.user.id);

    // 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –≤–æ—Ä–∫–∞—É—Ç
    const newWorkout = await prisma.workout.create({
      data: {
        title,
        color,
        userId,
      },
    });

    // 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const newWorkoutDay = await prisma.workoutDay.create({
      data: {
        date: null,
        workoutId: newWorkout.id,
        exercises: {
          create: await Promise.all(
            exercises.map(async (exercise: { name: string; setGroup?: ExerciseCreateType }) => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ExerciseType —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              let exerciseType = await prisma.exerciseType.findFirst({
                where: {
                  name: exercise.name,
                  userId,
                },
              });

              // –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π ExerciseType
              if (!exerciseType) {
                exerciseType = await prisma.exerciseType.create({
                  data: {
                    name: exercise.name,
                    userId,
                  },
                });
              }

              return {
                exerciseTypeId: exerciseType.id,
                setGroup: exercise.setGroup
                  ? {
                      create: exercise.setGroup,
                    }
                  : { create: {} }, // –ü—É—Å—Ç–∞—è –≥—Ä—É–ø–ø–∞ —Å–µ—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
              };
            }),
          ),
        },
      },
      include: {
        exercises: {
          include: {
            exerciseType: true, // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            setGroup: true,
          },
        },
      },
    });

    return NextResponse.json({ ...newWorkout, days: [newWorkoutDay] }, { status: 201 });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}
